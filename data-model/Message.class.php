<?php
/**
 * only from User to User?
 * Code skeleton generated by dia-uml2php5 plugin
 * written by KDO kdo@zpmag.com
 * @see        AbstractMAMAobject
 * 
 *  @Entity @Table(name="messages")
 * 
 */
require_once ('AbstractMAMAobject.class.php');
class Message extends AbstractMAMAobject {
	
	/**
	 * @Column(type="string", nullable=false, length=2048 )
	 *
	 * @var String
	 * @access private
	 */
	private $message;
	
	/**
	 * @ManyToOne(targetEntity="User", inversedBy="messages")
	 * @JoinColumn(name="u_sender_id", referencedColumnName="id", nullable=true)
	 *
	 * @var Long
	 * @access private
	 */
	private $fromUser;
	
	/**
	 * @ManyToOne(targetEntity="Project", inversedBy="messages")
	 * @JoinColumn(name="p_sender_id", referencedColumnName="id", nullable=true)
	 *
	 * @var Long
	 * @access private
	 */
	private $fromProject;
	
	/**
	 * @ManyToOne(targetEntity="User", inversedBy="messages")
	 * @JoinColumn(name="u_receiver_id", referencedColumnName="id", nullable=true)
	 *
	 * @var Long
	 * @access private
	 */
	private $toUser = null;
	
	/**
	 *
	 * @ManyToOne(targetEntity="Project", inversedBy="messages")
	 * @JoinColumn(name="p_receiver_id", referencedColumnName="id", nullable=true)
	 *
	 * @var Long
	 * @access private
	 */
	private $toProject = null;
	
	// ////////////////////////////////////////////////////////////////////////
	// CONSTRUCTORS
	
	/**
	 *
	 * @param User $fromUser        	
	 * @param User $toUser        	
	 * @param Project $toProject        	
	 * @param String $message        	
	 */
	public function __construct($fromUser, $fromProject, $toUser, $toProject, $message) {
		parent::__construct ();
		$this->fromUser = $fromUser;
		$this->fromProject = $fromProject;
		$this->toUser = $toUser;
		$this->toProject = $toProject;
		$this->message = $message;
	}
	
	// ////////////////////////////////////////////////////////////////////////
	// GETTERS / SETTERS
	
	/**
	 *
	 * @return String
	 */
	public function getMessage() {
		return $this->message;
	}
	
	/**
	 *
	 * @param String $message        	
	 */
	public function setMessage($message) {
		$this->message = $message;
	}
	
	/**
	 *
	 * @return User
	 */
	public function getFromUser() {
		return $this->fromUser;
	}
	
	/**
	 *
	 * @param User $fromUser        	
	 */
	public function setFromUser($fromUser) {
		$this->fromUser = $fromUser;
	}
	
	/**
	 *
	 * @return Project
	 */
	public function getFromProject() {
		return $this->fromProject;
	}
	
	/**
	 *
	 * @param Project $fromProject        	
	 */
	public function setFromProject($fromProject) {
		$this->fromProject = $fromProject;
	}
	
	/**
	 *
	 * @return User
	 */
	public function getToUser() {
		return $this->toUser;
	}
	
	/**
	 *
	 * @param User $toUser        	
	 */
	public function setToUser($toUser) {
		$this->toUser = $toUser;
	}
	
	/**
	 *
	 * @return Project
	 */
	public function getToProject() {
		return $this->toProject;
	}
	
	/**
	 *
	 * @param Project $toProject        	
	 */
	public function setToProject($toProject) {
		$this->toProject = $toProject;
	}
	
	// ////////////////////////////////////////////////////////////////////////
	// OTHER
	
	/**
	 */
	public function prune() {
		$this->id = intval ( $this->getId () );
		$this->message = $this->getMessage ();
		
		$fromUserS = null;
		$FromProjectS = null;
		$toUserS = null;
		$toProjectS = null;
		
		if ($this->getFromUser () != null)
			$fromUserS = [ 
					"id" => intval ( $this->getFromUser ()->getId () ),
					"fullName" => $this->getFromUser ()->getFullName (),
					"email" => $this->getFromUser ()->getEmail () 
			];
		if ($this->getToUser () != null)
			$toUserS = [ 
					"id" => intval ( $this->getToUser ()->getId () ),
					"fullName" => $this->getToUser ()->getFullName (),
					"email" => $this->getToUser ()->getEmail () 
			];
		if ($this->getFromProject () != null)
			$fromProjectS = [ 
					"id" => intval ( $this->getFromProject ()->getId () ),
					"title" => $this->getFromProject ()->getTitle () 
			];
		if ($this->getToProject () != null)
			$toProjectS = [ 
					"id" => intval ( $this->getToProject ()->getId () ),
					"title" => $this->getToProject ()->getTitle () 
			];
		
		$this->fromUser = $fromUserS;
		$this->fromProject = $FromProjectS;
		$this->toUser = $toUserS;
		$this->toProject = $toProjectS;
	}
	
	/**
	 */
	public function getJsonData() {
		$this->prune ();
		$var = get_object_vars ( $this );
		unset ( $var ["__initializer__"] );
		unset ( $var ["__cloner__"] );
		unset ( $var ["__isInitialized__"] );
		// unset ( $var ["password"] );
		unset ( $var ["deleted"] );
		foreach ( $var as &$value ) {
			if (is_object ( $value ) && method_exists ( $value, 'getJsonData' )) {
				$value = $value->getJsonData ();
			}
		}
		return $var;
	}
	
	/**
	 */
	public function getArrayData() {
		$this->prune ();
		$ret = Array ();
		$var = get_object_vars ( $this );
		unset ( $var ["__initializer__"] );
		unset ( $var ["__cloner__"] );
		unset ( $var ["__isInitialized__"] );
		unset ( $var ["password"] );
		unset ( $var ["deleted"] );
		foreach ( $var as $key => $val ) {
			$ret [$key] = object2array ( $val );
		}
		return $ret;
	}
}
?>