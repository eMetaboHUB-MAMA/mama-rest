<?php
require_once "UserEvent.class.php";
require_once "ProjectEvent.class.php";
require_once "MessageEvent.class.php";
require_once "AppointmentEvent.class.php";
require_once "AdminEvent.class.php";

/**
 * set this class to abstract and split it in 3 subclass: one for users, one for projects, one for messages?
 * Code skeleton generated by dia-uml2php5 plugin
 * written by KDO kdo@zpmag.com
 *
 * @see AbstractMAMAobject @Entity @Table(name="events")
 *      @InheritanceType("JOINED")
 *      @DiscriminatorColumn(name="type", type="smallint")
 *      @DiscriminatorMap({"100" = "UserEvent", "200" = "ProjectEvent", "300" = "MessageEvent", "400" = "AppointmentEvent", "500" = "AdminEvent"})
 */
require_once ('AbstractMAMAobject.class.php');
abstract class Event extends AbstractMAMAobject {
	
	// ////////////////////////////////////////////////////////////////////////
	// STATICS
	
	// admin
	public static $EVENT_TYPE_ADMIN = 500;
	public static $EVENT_TYPE_ADMIN_NEW_KEYWORD = 510;
	public static $EVENT_TYPE_ADMIN_UPDATE_KEYWORD = 515;
	public static $EVENT_TYPE_ADMIN_RESTORE_KEYWORD = 520;
	public static $EVENT_TYPE_ADMIN_DELETE_KEYWORD = 525;
	public static $EVENT_TYPE_ADMIN_NEW_SUBKEYWORD = 530;
	public static $EVENT_TYPE_ADMIN_UPDATE_SUBKEYWORD = 535;
	public static $EVENT_TYPE_ADMIN_RESTORE_SUBKEYWORD = 540;
	public static $EVENT_TYPE_ADMIN_DELETE_SUBKEYWORD = 545;
	public static $EVENT_TYPE_ADMIN_NEW_MTH_PF = 550;
	public static $EVENT_TYPE_ADMIN_UPDATE_MTH_PF = 555;
	
	// appointment
	public static $EVENT_TYPE_NEW_APPOINTMENT = 400;
	public static $EVENT_TYPE_UPDATE_APPOINTMENT = 410;
	public static $EVENT_TYPE_LOCK_APPOINTMENT = 420;
	public static $EVENT_TYPE_FAIL_APPOINTMENT = 430;
	
	// message
	public static $EVENT_TYPE_NEW_MESSAGE = 300;
	public static $EVENT_TYPE_NEW_MESSAGE_FROM_USER_TO_USER = 311;
	public static $EVENT_TYPE_NEW_MESSAGE_FROM_USER_TO_PROJECT = 312;
	public static $EVENT_TYPE_NEW_MESSAGE_FROM_PROJECT_TO_USER = 321;
	public static $EVENT_TYPE_NEW_MESSAGE_FROM_PROJECT_TO_PROJECT = 322;
	
	// analysis
	public static $EVENT_TYPE_NEW_PROJECT = 200;
	public static $EVENT_TYPE_UPDATE_PROJECT__assigned = 201;
	public static $EVENT_TYPE_UPDATE_PROJECT__accepted = 202;
	public static $EVENT_TYPE_UPDATE_PROJECT__completed = 203;
	public static $EVENT_TYPE_UPDATE_PROJECT__running = 204;
	public static $EVENT_TYPE_UPDATE_PROJECT__archived = 205;
	public static $EVENT_TYPE_UPDATE_PROJECT__blocked = 210;
	public static $EVENT_TYPE_UPDATE_PROJECT__rejected = 211;
	public static $EVENT_TYPE_UPDATE_PROJECT__informations = 220;
	public static $EVENT_TYPE_UPDATE_PROJECT__deleted = 290;
	public static $EVENT_TYPE_UPDATE_PROJECT__new_analyst_in_charge = 230;
	public static $EVENT_TYPE_UPDATE_PROJECT__new_analyst_involved = 231;
	public static $EVENT_TYPE_UPDATE_PROJECT__new_extra_data = 250;
	
	// user
	public static $EVENT_TYPE_NEW_USER = 100;
	public static $EVENT_TYPE_UPDATE_USER__set2blocked = 101;
	public static $EVENT_TYPE_UPDATE_USER__set2user = 102;
	public static $EVENT_TYPE_UPDATE_USER__set2pm = 103;
	public static $EVENT_TYPE_UPDATE_USER__set2admin = 104;
	public static $EVENT_TYPE_UPDATE_USER__set2inactive = 105;
	public static $EVENT_TYPE_UPDATE_USER__informations = 120;
	public static $EVENT_TYPE_UPDATE_USER__password = 121;
	public static $EVENT_TYPE_UPDATE_USER__reset_password = 122;
	public static $EVENT_TYPE_UPDATE_USER__deleted = 190;
	public static $EVENT_TYPE_UPDATE_USER__set_in_charge = 130;
	public static $EVENT_TYPE_UPDATE_USER__set_involved = 131;
	
	// ////////////////////////////////////////////////////////////////////////
	// ATTRIBUTES
	
	/**
	 * 100: new User
	 * 101: User update: set to PM
	 * 102: User update: set to Admin
	 * 103: User update: set to Blocked
	 *
	 * 200: new analysis request (waiting)
	 * 201: analysis request update: completed
	 * 202: analysis request update: assigned
	 * 203: analysis request update: running
	 * 204: analysis request update: closed
	 * 205: analysis request update: archived
	 * 206: analysis request update: blocked
	 * 207: analysis request update: rejected
	 *
	 * 300: new message on analysis request
	 * 301: new message to user
	 *
	 * 400: new appointment from user to user
	 *
	 * @Column(type="smallint", name="event_type", nullable=false)
	 *
	 * @var short
	 * @access protected
	 */
	protected $eventType;
	
	/**
	 * @ManyToOne(targetEntity="User", inversedBy="events")
	 * @JoinColumn(name="user_id", referencedColumnName="id", nullable=false)
	 *
	 * @var User
	 * @access protected
	 */
	protected $user;
	
	// ////////////////////////////////////////////////////////////////////////
	// CONSTRUCTORS
	/**
	 *
	 * @param short $type        	
	 */
	public function __construct($user, $type) {
		parent::__construct ();
		$this->user = $user;
		// if ($type >= Event::$EVENT_TYPE_NEW_APPOINTMENT)
		// $type = Event::$EVENT_TYPE_NEW_APPOINTMENT;
		// else if ($type >= Event::$EVENT_TYPE_NEW_MESSAGE_TO_USER)
		// $type = Event::$EVENT_TYPE_NEW_MESSAGE_TO_USER;
		// else if ($type >= Event::$EVENT_TYPE_NEW_PROJECT)
		// $type = Event::$EVENT_TYPE_NEW_PROJECT;
		// else if ($type >= Event::$EVENT_TYPE_NEW_USER)
		// $type = Event::$EVENT_TYPE_NEW_USER;
		$this->eventType = $type;
	}
	
	// ////////////////////////////////////////////////////////////////////////
	// GETTERS / SETTERS
	
	/**
	 *
	 * @return short
	 */
	public function getType() {
		switch ($this->eventType) {
			// ////////////////////////////////////////////////////// UERS
			case Event::$EVENT_TYPE_NEW_USER :
				return "_user_created";
			case Event::$EVENT_TYPE_UPDATE_USER__informations :
				return "_user_informations_update";
			case Event::$EVENT_TYPE_UPDATE_USER__password :
				return "_user_password_update";
			case Event::$EVENT_TYPE_UPDATE_USER__reset_password :
				return "_user_reset_password";
			case Event::$EVENT_TYPE_UPDATE_USER__set2blocked :
				return "_user_new_status_right__blocked";
			case Event::$EVENT_TYPE_UPDATE_USER__set2user :
				return "_user_new_status_right__user";
			case Event::$EVENT_TYPE_UPDATE_USER__set2pm :
				return "_user_new_status_right__project_manager";
			case Event::$EVENT_TYPE_UPDATE_USER__set2admin :
				return "_user_new_status_right__admin";
			case Event::$EVENT_TYPE_UPDATE_USER__set2inactive :
				return "_user_new_status_right__inactive";
			case Event::$EVENT_TYPE_UPDATE_USER__set_in_charge :
				return "_user_new_new_project_in_charge";
			case Event::$EVENT_TYPE_UPDATE_USER__set_involved :
				return "_user_new_new_project_involved";
			
			// ////////////////////////////////////////////////////// PROJECTS
			case Event::$EVENT_TYPE_NEW_PROJECT :
				return "_project_created";
			case Event::$EVENT_TYPE_UPDATE_PROJECT__new_analyst_in_charge :
				return "_project_new_in_charge";
			case Event::$EVENT_TYPE_UPDATE_PROJECT__new_analyst_involved :
				return "_project_new_involved";
			case Event::$EVENT_TYPE_UPDATE_PROJECT__assigned :
				return "_project_set_to_assigned";
			case Event::$EVENT_TYPE_UPDATE_PROJECT__accepted :
				return "_project_set_to_accepted";
			case Event::$EVENT_TYPE_UPDATE_PROJECT__completed :
				return "_project_set_to_completed";
			case Event::$EVENT_TYPE_UPDATE_PROJECT__running :
				return "_project_set_to_running";
			case Event::$EVENT_TYPE_UPDATE_PROJECT__archived :
				return "_project_set_to_archived";
			case Event::$EVENT_TYPE_UPDATE_PROJECT__blocked :
				return "_project_set_to_blocked";
			case Event::$EVENT_TYPE_UPDATE_PROJECT__rejected :
				return "_project_set_to_rejected";
			case Event::$EVENT_TYPE_UPDATE_PROJECT__informations :
				return "_project_set_basic_informations";
			
			// ////////////////////////////////////////////////////// ADMIN
			case Event::$EVENT_TYPE_ADMIN_NEW_KEYWORD :
				return "_new_keyword";
			case Event::$EVENT_TYPE_ADMIN_UPDATE_KEYWORD :
				return "_update_keyword";
			case Event::$EVENT_TYPE_ADMIN_RESTORE_KEYWORD :
				return "_restore_keyword";
			case Event::$EVENT_TYPE_ADMIN_DELETE_KEYWORD :
				return "_delete_keyword";
			case Event::$EVENT_TYPE_ADMIN_NEW_SUBKEYWORD :
				return "_new_subkeyword";
			case Event::$EVENT_TYPE_ADMIN_UPDATE_SUBKEYWORD :
				return "_update_subkeyword";
			case Event::$EVENT_TYPE_ADMIN_RESTORE_SUBKEYWORD :
				return "_restore_subkeyword";
			case Event::$EVENT_TYPE_ADMIN_DELETE_SUBKEYWORD :
				return "_delete_subkeyword";
			case Event::$EVENT_TYPE_ADMIN_NEW_MTH_PF :
				return "_new_mth_platform";
			case Event::$EVENT_TYPE_ADMIN_UPDATE_MTH_PF :
				return "_update_mth_platform";
			
			// TODO message(s)
			
			// ////////////////////////////////////////////////////// APPOINTMENTS
			case Event::$EVENT_TYPE_NEW_APPOINTMENT :
				return "_new_appointment";
			case Event::$EVENT_TYPE_UPDATE_APPOINTMENT :
				return "_update_appointment";
			case Event::$EVENT_TYPE_LOCK_APPOINTMENT :
				return "_lock_appointment";
			case Event::$EVENT_TYPE_FAIL_APPOINTMENT :
				return "_fail_appointment";
			// ////////////////////////////////////////////////////// OTHER
			default :
				return "__error__";
		}
	}
	
	/**
	 *
	 * @param unknown $type        	
	 */
	public function setType($eventType) {
		$this->eventType = $eventType;
	}
	
	/**
	 *
	 * @return short
	 */
	public function getUser() {
		return $this->user;
	}
	
	/**
	 *
	 * @param User $user        	
	 */
	public function setUser($user) {
		$this->user = $user;
	}
	
	// ////////////////////////////////////////////////////////////////////////
	// OTHER
	public function prune() {
		$user = [ 
				"id" => intval ( $this->user->getId () ),
				"fullName" => $this->user->getFirstName () . " " . $this->user->getLastName () 
		];
		$this->user = $user;
		$this->eventType = $this->getType ();
	}
}
?>