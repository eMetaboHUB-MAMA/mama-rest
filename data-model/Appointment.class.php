<?php
/**
 * 
 * Code skeleton generated by dia-uml2php5 plugin
 * written by KDO kdo@zpmag.com
 * @see        Event
 * 
 * @Entity @Table(name="appointments")
 */
require_once ('AbstractMAMAobject.class.php');
class Appointment extends AbstractMAMAobject {
	
	// ////////////////////////////////////////////////////////////////////////
	// STATICS
	
	// ////////////////////////////////////////////////////////////////////////
	// ATTRIBUTES
	/**
	 *
	 * @ManyToOne(targetEntity="Project")
	 * @JoinColumn(name="project_id", referencedColumnName="id", nullable=true)
	 *
	 * @var Long
	 * @access private
	 */
	private $project;
	// , inversedBy="appointments"
	
	/**
	 * @ManyToOne(targetEntity="User")
	 * @JoinColumn(name="u_appointment_initiator_id", referencedColumnName="id", nullable=true)
	 *
	 * @var Long
	 * @access private
	 */
	private $fromUser;
	// , inversedBy="appointments"
	
	/**
	 * @ManyToOne(targetEntity="User")
	 * @JoinColumn(name="u_appointment_receiver_id", referencedColumnName="id", nullable=true)
	 *
	 * @var Long
	 * @access private
	 */
	private $toUser = null;
	// , inversedBy="appointments"
	
	/**
	 * @Column(type="datetime", name="appointment_date", nullable=true)
	 *
	 * @var Date
	 * @access private
	 */
	private $appointmentDate;
	
	/**
	 * @Column(type="string", nullable=false, length=2048 )
	 *
	 * @var String
	 * @access private
	 */
	private $message;
	
	/**
	 * @ManyToMany(targetEntity="AppointmentProp", mappedBy="appointment")
	 *
	 * @var Array<AppointmentProp>()
	 * @access private
	 */
	private $appointmentDatesPropositions;
	
	// ////////////////////////////////////////////////////////////////////////
	// CONSTRUCTORS
	/**
	 *
	 * @param unknown $fromUser        	
	 * @param unknown $user        	
	 * @param unknown $appointmentDate        	
	 * @param unknown $message        	
	 */
	public function __construct($project, $fromUser, $toUser, $appointmentDate, $message) {
		parent::__construct ();
		$this->fromUser = $fromUser;
		$this->toUser = $toUser;
		$this->project = $project;
		$this->message = $message;
		$this->appointmentDate = $appointmentDate;
		$this->appointmentDatesPropositions = new \Doctrine\Common\Collections\ArrayCollection ();
	}
	
	// ////////////////////////////////////////////////////////////////////////
	// GETTERS / SETTERS
	
	/**
	 *
	 * @return Project
	 */
	public function getProject() {
		return $this->project;
	}
	
	/**
	 *
	 * @param unknown $project        	
	 */
	public function setProject($project) {
		$this->project = $project;
	}
	
	/**
	 *
	 * @return User
	 */
	public function getFromUser() {
		return $this->fromUser;
	}
	
	/**
	 *
	 * @param unknown $fromUser        	
	 */
	public function setFromUser($fromUser) {
		$this->fromUser = $fromUser;
	}
	
	/**
	 *
	 * @return User
	 */
	public function getToUser() {
		return $this->toUser;
	}
	
	/**
	 *
	 * @param unknown $user        	
	 */
	public function setToUser($toUser) {
		$this->toUser = $toUser;
	}
	
	/**
	 *
	 * @return Date
	 */
	public function getAppointmentDate() {
		return $this->appointmentDate;
	}
	/**
	 *
	 * @param unknown $appointment        	
	 */
	public function setAppointmentDate($appointmentDate) {
		$this->appointmentDate = $appointmentDate;
	}
	public function getAppointmentDatesPropositions() {
		return $this->appointmentDatesPropositions;
	}
	public function setAppointmentDatesPropositions($appointmentDatesPropositions) {
		$this->appointmentDatesPropositions = $appointmentDatesPropositions;
	}
	public function getMessage() {
		return $this->message;
	}
	public function setMessage($message) {
		$this->message = $message;
	}
	// ////////////////////////////////////////////////////////////////////////
	// OTHER
	public function addAppointmentProp($appointmentDateProp) {
		return $this->getAppointmentDatesPropositions ()->add ( $appointmentDateProp );
	}
	public function getNbDatesProp() {
		$nb = 0;
		foreach ( $this->appointmentDatesPropositions as $k => $v ) {
			if (is_null ( ($v->getAppointmentSelected ()) )) {
				$nb ++;
			}
		}
		return $nb;
	}
	
	// ////////////////////////////////////////////////////////////////////////
	// OUTMOP
	/**
	 */
	public function prune() {
		$this->id = intval ( $this->getId () );
		//
		// user from
		$uFrom = [ 
				"id" => intval ( $this->fromUser->getId () ),
				"fullName" => $this->fromUser->getFullName (),
				"email" => $this->fromUser->getEmail (),
				"phoneGroup" => $this->fromUser->getPhoneGroup (),
				"phoneNumber" => $this->fromUser->getPhoneNumber () 
		];
		$this->fromUser = $uFrom;
		// user to
		$uTo = [ 
				"id" => intval ( $this->toUser->getId () ),
				"fullName" => $this->toUser->getFullName (),
				"email" => $this->toUser->getEmail (),
				"phoneGroup" => $this->toUser->getPhoneGroup (),
				"phoneNumber" => $this->toUser->getPhoneNumber () 
		];
		$this->toUser = $uTo;
		// project
		$pj = [ 
				"id" => intval ( $this->project->getId () ),
				"title" => $this->project->getTitle () 
		];
		$this->project = $pj;
		// date appointment: just date, bool keeped
		$dateToChoose = Array ();
		foreach ( $this->appointmentDatesPropositions as $k => $v ) {
			$newDate = [ 
					"id" => intval ( $v->getId () ),
					"appointmentSelected" => ($v->getAppointmentSelected ()),
					"date" => $v->getAppointmentPropositionDate () 
			];
			array_push ( $dateToChoose, $newDate );
		}
		$this->appointmentDatesPropositions = $dateToChoose;
	}
	
	/**
	 */
	public function getJsonData() {
		$this->prune ();
		$var = get_object_vars ( $this );
		unset ( $var ["__initializer__"] );
		unset ( $var ["__cloner__"] );
		unset ( $var ["__isInitialized__"] );
		unset ( $var ["deleted"] );
		foreach ( $var as &$value ) {
			if (is_object ( $value ) && method_exists ( $value, 'getJsonData' )) {
				$value = $value->getJsonData ();
			}
		}
		return $var;
	}
	
	/**
	 */
	public function getArrayData() {
		$this->prune ();
		$ret = Array ();
		$var = get_object_vars ( $this );
		unset ( $var ["__initializer__"] );
		unset ( $var ["__cloner__"] );
		unset ( $var ["__isInitialized__"] );
		unset ( $var ["deleted"] );
		foreach ( $var as $key => $val ) {
			$ret [$key] = object2array ( $val );
		}
		return $ret;
	}
}
?>