<?php
/**
 * 
 * Code skeleton generated by dia-uml2php5 plugin
 * written by KDO kdo@zpmag.com
 * @see        Event
 * 
 * @Entity @Table(name="messages_events")
 */
require_once ('Event.class.php');
class MessageEvent extends Event {
	
	/**
	 * @ManyToOne(targetEntity="Message", inversedBy="events")
	 * @JoinColumn(name="message_id", referencedColumnName="id", nullable=false)
	 *
	 * @var Message
	 * @access private
	 */
	private $message;
	public function __construct($user, $type, $message) {
		parent::__construct ( $user, $type );
		$this->message = $message;
	}
	
	// ////////////////////////////////////////////////////////////////////////
	// GETTERS / SETTERS
	public function getMessage() {
		return $this->message;
	}
	public function setMessage($message) {
		$this->message = $message;
	}
	
	// ////////////////////////////////////////////////////////////////////////
	// OTHER
	public function prune() {
		parent::prune ();
		$this->id = intval ( $this->getId () );
		$messageS = [ 
				"id" => intval ( $this->message->getId () ),
				"message" => $this->message->getMessage () 
		];
		if ($this->message->getFromUser () != null) {
			$messageS [] = $this->message->getFromUser ()->getFullName ();
		}
		if ($this->message->getToUser () != null) {
			$messageS [] = $this->message->getToUser ()->getFullName ();
		}
		if ($this->message->getFromProject () != null) {
			$messageS [] = $this->message->getFromProject ()->getTitle ();
		}
		if ($this->message->getToProject () != null) {
			$messageS [] = $this->message->getToProject ()->getTitle ();
		}
		$this->message = $messageS;
	}
	
	/**
	 */
	public function getJsonData() {
		$this->prune ();
		$var = get_object_vars ( $this );
		$var ['type'] = $var ['eventType'];
		unset ( $var ["__initializer__"] );
		unset ( $var ["__cloner__"] );
		unset ( $var ["__isInitialized__"] );
		unset ( $var ["deleted"] );
		unset ( $var ["eventType"] );
		foreach ( $var as &$value ) {
			if (is_object ( $value ) && method_exists ( $value, 'getJsonData' )) {
				$value = $value->getJsonData ();
			}
		}
		return $var;
	}
	
	/**
	 */
	public function getArrayData() {
		$this->prune ();
		$ret = Array ();
		$var = get_object_vars ( $this );
		$var ['type'] = $var ['eventType'];
		$var = get_object_vars ( $this );
		unset ( $var ["__initializer__"] );
		unset ( $var ["__cloner__"] );
		unset ( $var ["__isInitialized__"] );
		unset ( $var ["deleted"] );
		unset ( $var ["eventType"] );
		foreach ( $var as $key => $val ) {
			// if (is_object ( $val ) && method_exists ( $val, 'getArrayData' )) {
			// $val = $val->getArrayData ();
			// }
			$ret [$key] = object2array ( $val );
		}
		return $ret;
	}
}
?>