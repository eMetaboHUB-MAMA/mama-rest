<?php
/**
 * 
 * Code skeleton generated by dia-uml2php5 plugin
 * written by KDO kdo@zpmag.com
 * @see        AbstractMAMAobject
 * 
 * @Entity @Table(name="users")
 */
require_once ('AbstractMAMAobject.class.php');
class User extends AbstractMAMAobject {
	
	// ////////////////////////////////////////////////////////////////////////
	// STATICS
	
	// status
	public static $STATUS_NOT_VALIDATED = 0;
	public static $STATUS_ACTIVE = 10;
	public static $STATUS_BLOCKED = 20;
	public static $STATUS_INACTIVE = 30;
	
	// rights
	public static $RIGHT_USER = 500;
	public static $RIGHT_PROJECT_MANAGER = 510;
	public static $RIGHT_ADMIN = 520;
	
	// labo type
	public static $LABO_TYPE_PUBLIC = 5;
	public static $LABO_TYPE_PUBLIC_PRIVATE = 15;
	public static $LABO_TYPE_PRIVATE = 25;
	
	// email notification (digest or not)
	public static $EMAIL_NOTIFICATION_EACH = 6;
	public static $EMAIL_NOTIFICATION_DAILY = 12;
	public static $EMAIL_NOTIFICATION_WEEKLY = 18;
	
	// email language
	public static $EMAIL_LANGUAGE_EN = 0;
	public static $EMAIL_LANGUAGE_FR = 1;
	
	// ////////////////////////////////////////////////////////////////////////
	// ATTRIBUTES
	
	/**
	 * @Column(type="string", unique=true)
	 * @Assert\NotEmpty
	 *
	 * @var String
	 * @access private
	 */
	private $email;
	
	/**
	 * @Column(type="string", unique=true)
	 * @Assert\NotEmpty
	 *
	 * @var String
	 * @access private
	 */
	private $login;
	
	/**
	 * @Column(type="string", nullable=true)
	 *
	 * @var String
	 * @access private
	 */
	private $password;
	
	/**
	 * @Column(type="smallint", name="user_status")
	 *
	 * @var Short
	 * @access private
	 */
	private $status;
	
	/**
	 * @Column(type="smallint", name="user_right")
	 *
	 * @var Short
	 * @access private
	 */
	private $right;
	
	/**
	 * @Column(type="datetime", name="last_activity")
	 *
	 * @var Date
	 * @access private
	 */
	private $lastActivity;
	
	/**
	 * @Column(type="string", name="first_name", nullable=true)
	 *
	 * @var String
	 * @access private
	 */
	private $firstName;
	
	/**
	 * @Column(type="string", name="last_name", nullable=true)
	 *
	 * @var String
	 * @access private
	 */
	private $lastName;
	
	/**
	 * @Column(type="smallint", name="phone_groupe", nullable=true)
	 *
	 * @var Integer
	 * @access private
	 */
	private $phoneGroup;
	
	/**
	 * @Column(type="string", name="phone_number", nullable=true)
	 *
	 * @var String
	 * @access private
	 */
	private $phoneNumber;
	
	/**
	 * @Column(type="string", name="laboratory_or_compagny", nullable=true)
	 *
	 * @var String
	 * @access private
	 */
	private $laboratoryOrCompagny;
	
	/**
	 * @Column(type="string", name="workplace_address", nullable=true)
	 *
	 * @var String
	 * @access private
	 */
	private $workplaceAddress;
	
	/**
	 * @Column(type="smallint", name="laboratory_type", nullable=true)
	 *
	 * @var Short
	 * @access private
	 */
	private $laboratoryType;
	
	/**
	 * @Column(type="smallint", name="email_reception", nullable=true)
	 *
	 * @var Short
	 * @access private
	 */
	private $emailReception;
	
	/**
	 * @Column(type="boolean", name="email_alert_new_user")
	 *
	 * @var boolean
	 * @access private
	 */
	private $emailAlertNewUserAccount = true;
	
	/**
	 * @Column(type="boolean", name="email_alert_new_project")
	 *
	 * @var boolean
	 * @access private
	 */
	private $emailAlertNewProject = true;
	
	/**
	 * @Column(type="boolean", name="email_alert_new_event_followed_project")
	 *
	 * @var boolean
	 * @access private
	 */
	private $emailAlertNewEventFollowedProject = true;
	
	/**
	 * @Column(type="boolean", name="email_alert_new_message")
	 *
	 * @var boolean
	 * @access private
	 */
	private $emailAlertNewMessage = true;
	
	/**
	 * @Column(type="smallint", name="email_language", nullable=true)
	 *
	 * @var Short
	 * @access private
	 */
	private $emailLanguage;
	
	// ////////////////////////////////////////////////////////////////////////
	
	/**
	 * @OneToMany(targetEntity="Project", mappedBy="users")
	 *
	 * @var Project
	 * @access private
	 */
	private $projectsOwner;
	
	/**
	 * @OneToMany(targetEntity="Project", mappedBy="users")
	 *
	 * @var Project
	 * @access private
	 */
	private $projectsInCharge;
	
	/**
	 * @ManyToMany(targetEntity="Project", inversedBy="analystsInvolved")
	 * @JoinTable(name="users_involved_in_projects",
	 * joinColumns={@JoinColumn(name="user_id", referencedColumnName="id")},
	 * inverseJoinColumns={@JoinColumn(name="project_id", referencedColumnName="id")}
	 * )
	 *
	 * @var Project
	 * @access private
	 */
	private $projectsInvolded;
	
	// ////////////////////////////////////////////////////////////////////////
	/**
	 * @OneToMany(targetEntity="Message", mappedBy="users")
	 *
	 * @var Message
	 * @access private
	 */
	private $messagesSend;
	
	/**
	 * @OneToMany(targetEntity="Message", mappedBy="users")
	 *
	 * @var Message
	 * @access private
	 */
	private $messagesReceived;
	
	/**
	 * @OneToMany(targetEntity="UserEvent", mappedBy="users")
	 *
	 * @var UserEvent
	 * @access private
	 */
	private $userEvents;
	
	/**
	 * @ManyToOne(targetEntity="MTHplatform", inversedBy="users", fetch="EAGER")
	 * @JoinColumn(name="platform_id", referencedColumnName="id", nullable=true)
	 *
	 * @var MTHplatform
	 * @access private
	 */
	private $mthPlatform;

	
	// ////////////////////////////////////////////////////////////////////////
	// CONSTRUCTORS
	// /**
	// */
	// public function __construct() {
	// __construct( null, User::$STATUS_NOT_VALIDATED, User::$RIGHT_USER );
	// }
	
	/**
	 *
	 * @param String $login        	
	 * @param String $email        	
	 * @param Short $status        	
	 * @param Short $right        	
	 */
	public function __construct($login, $email, $status, $right) {
		parent::__construct ();
		$this->login = $login;
		$this->email = $email;
		$this->status = $status;
		$this->right = $right;
		// projects
		$this->projectsOwner = new \Doctrine\Common\Collections\ArrayCollection ();
		$this->projectsInCharge = new \Doctrine\Common\Collections\ArrayCollection ();
		$this->projectsInvolded = new \Doctrine\Common\Collections\ArrayCollection ();
		// messages
		$this->messagesSend = new \Doctrine\Common\Collections\ArrayCollection ();
		$this->messagesReceived = new \Doctrine\Common\Collections\ArrayCollection ();
		// bonus
		$this->emailReception = User::$EMAIL_NOTIFICATION_DAILY;
		// update -- NOW!
		$this->lastActivity = new \DateTime ( "now" );
	}
	
	// ////////////////////////////////////////////////////////////////////////
	// GETTERS
	/**
	 *
	 * @return String
	 */
	public function getEmail() {
		return $this->email;
	}
	
	/**
	 *
	 * @return String
	 */
	public function getLogin() {
		return $this->login;
	}
	// public function getPassword() {
	// return $this->password;
	// }
	
	/**
	 *
	 * @return string
	 */
	public function getStatus() {
		switch ($this->status) {
			case User::$STATUS_ACTIVE :
				return "active";
			case User::$STATUS_BLOCKED :
				return "blocked";
			case User::$STATUS_INACTIVE :
				return "inactive";
			case User::$STATUS_NOT_VALIDATED :
			default :
				return "not_validated";
		}
	}
	
	/**
	 *
	 * @return string
	 */
	public function getRight() {
		switch ($this->right) {
			case User::$RIGHT_ADMIN :
				return "admin";
			case User::$RIGHT_PROJECT_MANAGER :
				return "project_manager";
			case User::$RIGHT_USER :
			default :
				return "user";
		}
	}
	
	/**
	 *
	 * @return Date
	 */
	public function getLastActivity() {
		return $this->lastActivity;
	}
	
	/**
	 *
	 * @return String
	 */
	public function getFirstName() {
		return $this->firstName;
	}
	
	/**
	 *
	 * @return String
	 */
	public function getLastName() {
		return $this->lastName;
	}
	/**
	 *
	 * @return Integer
	 */
	public function getPhoneGroup() {
		return $this->phoneGroup;
	}
	
	/**
	 *
	 * @return String
	 */
	public function getPhoneNumber() {
		return $this->phoneNumber;
	}
	
	/**
	 *
	 * @return String
	 */
	public function getLaboratoryOrCompagny() {
		return $this->laboratoryOrCompagny;
	}
	
	/**
	 *
	 * @return String
	 */
	public function getWorkplaceAddress() {
		return $this->workplaceAddress;
	}
	
	/**
	 *
	 * @return string|NULL
	 */
	public function getLaboratoryType() {
		switch ($this->laboratoryType) {
			case User::$LABO_TYPE_PRIVATE :
				return "private";
			case User::$LABO_TYPE_PUBLIC_PRIVATE :
				return "public_private";
			case User::$LABO_TYPE_PUBLIC :
				return "public";
			default :
				return null;
		}
	}
	
	/**
	 *
	 * @return string|NULL
	 */
	public function getEmailReception() {
		switch ($this->emailReception) {
			case User::$EMAIL_NOTIFICATION_WEEKLY :
				return "weekly_digest";
			case User::$EMAIL_NOTIFICATION_EACH :
				return "each_notification";
			case User::$EMAIL_NOTIFICATION_DAILY :
			default :
				return "daily_digest";
		}
	}
	
	/**
	 *
	 * @return boolean
	 */
	public function isEmailAlertNewUserAccount() {
		return $this->emailAlertNewUserAccount;
	}
	
	/**
	 *
	 * @return boolean
	 */
	public function isEmailAlertNewProject() {
		return $this->emailAlertNewProject;
	}
	
	/**
	 *
	 * @return boolean
	 */
	public function isEmailAlertNewEventFollowedProject() {
		return $this->emailAlertNewEventFollowedProject;
	}
	
	/**
	 *
	 * @return boolean
	 */
	public function isEmailAlertNewMessage() {
		return $this->emailAlertNewMessage;
	}
	
	// ////////////////////////////////////////////////////////////////////////
	// GETTERS JSON
	/**
	 *
	 * @return boolean
	 */
	public function getFullName() {
		return $this->getFirstName () . " " . $this->getLastName ();
	}
	
	// ////////////////////////////////////////////////////////////////////////
	// SETTERS
	
	// public function setEmail($email) {
	// $this->email = $email;
	// }
	
	/**
	 *
	 * @param String $password        	
	 */
	public function setPassword($password) {
		$this->password = $password;
	}
	
	/**
	 *
	 * @param String $firstName        	
	 */
	public function setFirstName($firstName) {
		$this->firstName = $firstName;
	}
	
	/**
	 *
	 * @param String $lastName        	
	 */
	public function setLastName($lastName) {
		$this->lastName = $lastName;
	}
	
	/**
	 *
	 * @param Integer $phoneGroup        	
	 */
	public function setPhoneGroup($phoneGroup) {
		if (! is_int ( $phoneGroup ))
			$phoneGroup = intval ( $phoneGroup );
		$this->phoneGroup = $phoneGroup;
	}
	
	/**
	 *
	 * @param String $phoneNumber        	
	 */
	public function setPhoneNumber($phoneNumber) {
		$this->phoneNumber = $phoneNumber;
	}
	
	/**
	 *
	 * @param String $laboratoryOrCompagny        	
	 */
	public function setLaboratoryOrCompagny($laboratoryOrCompagny) {
		$this->laboratoryOrCompagny = $laboratoryOrCompagny;
	}
	
	/**
	 *
	 * @param String $workplaceAddress        	
	 */
	public function setWorkplaceAddress($workplaceAddress) {
		$this->workplaceAddress = $workplaceAddress;
	}
	
	/**
	 *
	 * @param unknown $laboratoryType        	
	 */
	public function setLaboratoryType($laboratoryType) {
		$laboTypeInt = intval ( $laboratoryType );
		switch ($laboratoryType) {
			case "public" :
				$laboTypeInt = User::$LABO_TYPE_PUBLIC;
				break;
			case "public_private" :
			case "private_public" :
				$laboTypeInt = User::$LABO_TYPE_PUBLIC_PRIVATE;
				break;
			case "private" :
				$laboTypeInt = User::$LABO_TYPE_PRIVATE;
				break;
		}
		$this->laboratoryType = $laboTypeInt;
	}
	
	/**
	 *
	 * @param unknown $emailReception        	
	 */
	public function setEmailReception($emailReception) {
		$emailNotifInt = intval ( $emailReception );
		switch ($emailReception) {
			case "each_notification" :
				$emailNotifInt = User::$EMAIL_NOTIFICATION_EACH;
				break;
			case "weekly_digest" :
				$emailNotifInt = User::$EMAIL_NOTIFICATION_WEEKLY;
				break;
			case "daily_digest" :
				$emailNotifInt = User::$EMAIL_NOTIFICATION_DAILY;
				break;
		}
		$this->emailReception = $emailNotifInt;
	}
	
	/**
	 *
	 * @param unknown $emailAlertNewUserAccount        	
	 * @param unknown $emailAlertNewProject        	
	 * @param unknown $emailAlertNewEventFollowedProject        	
	 * @param unknown $emailAlertNewMessage        	
	 */
	public function setEmailAlert($emailAlertNewUserAccount, $emailAlertNewProject, $emailAlertNewEventFollowedProject, $emailAlertNewMessage) {
		$this->emailAlertNewUserAccount = ($emailAlertNewUserAccount);
		$this->emailAlertNewProject = ($emailAlertNewProject);
		$this->emailAlertNewEventFollowedProject = ($emailAlertNewEventFollowedProject);
		$this->emailAlertNewMessage = ($emailAlertNewMessage);
	}
	
	/**
	 *
	 * @param string $status        	
	 */
	public function setStatus($status) {
		$statusInt = intval ( $status );
		switch ($status) {
			case "active" :
				$statusInt = User::$STATUS_ACTIVE;
				break;
			case "blocked" :
				$statusInt = User::$STATUS_BLOCKED;
				break;
			case "inactive" :
				$statusInt = User::$STATUS_INACTIVE;
				break;
			case "not_validated" :
				// default :
				$statusInt = User::$STATUS_NOT_VALIDATED;
				break;
		}
		$this->status = $statusInt;
	}
	
	/**
	 *
	 * @param string $right        	
	 */
	public function setRight($right) {
		switch ($right) {
			case "admin" :
				$this->right = User::$RIGHT_ADMIN;
				break;
			case "project_manager" :
				$this->right = User::$RIGHT_PROJECT_MANAGER;
				break;
			case "user" :
			default :
				$this->right = User::$RIGHT_USER;
				break;
		}
	}
	
	/**
	 */
	public function setLastActivity() {
		$this->lastActivity = new \DateTime ( "now" );
	}
	
	// ////////////////////////////////////////////////////////////////////////
	// OTHER
	
	/**
	 *
	 * @access public
	 * @return boolean
	 */
	public final function isAdmin() {
		return $this->right == User::$RIGHT_ADMIN;
	}
	
	/**
	 *
	 * @access public
	 * @return boolean
	 */
	public final function isProjectManager() {
		return $this->right == User::$RIGHT_PROJECT_MANAGER;
	}
	
    /**
	 *
	 * @access public
	 * @return boolean
	 */
	public final function isUser() {
		return $this->right == User::$RIGHT_USER;
	}
	
	/**
	 *
	 * @access public
	 * @return boolean
	 */
	public final function isActive() {
		return $this->status == User::$STATUS_ACTIVE;
	}
	
	/**
	 *
	 * @return boolean
	 */
	public final function isBlocked() {
		return $this->status == User::$STATUS_BLOCKED;
	}
	
	/**
	 *
	 * @return boolean
	 */
	public final function isInactive() {
		return $this->status == User::$STATUS_INACTIVE;
	}
	
	/**
	 *
	 * @return boolean
	 */
	public final function isNotValidated() {
		return $this->status == User::$STATUS_NOT_VALIDATED;
	}
	
	/**
	 *
	 * @access public
	 * @param long $projectId        	
	 * @return boolean
	 */
	public final function isInvolvedInProject($projectId) {
	}
	
	/**
	 */
	public function prune() {
		$this->id = intval ( $this->getId () );
		$this->password = null;
		$this->status = $this->getStatus ();
		$this->right = $this->getRight ();
		$this->laboratoryType = $this->getLaboratoryType ();
		$this->emailReception = $this->getEmailReception ();
		$this->emailLanguage = $this->getEmailLanguage ();
	}
	
	/**
	 */
	public function ultraPrune() {
		$var = [ 
				"id" => intval ( $this->getId () ),
				"fullName" => $this->getFirstName () . " " . $this->getLastName () 
		];
		return $var;
	}
	
	/**
	 */
	public function getJsonData($ultraPrune = false) {
		if ($ultraPrune)
			return $this->ultraPrune ();
		$this->prune ();
		$var = get_object_vars ( $this );
		unset ( $var ["__initializer__"] );
		unset ( $var ["__cloner__"] );
		unset ( $var ["__isInitialized__"] );
		unset ( $var ["password"] );
		unset ( $var ["deleted"] );
		foreach ( $var as &$value ) {
			if (is_object ( $value ) && method_exists ( $value, 'getJsonData' )) {
				$value = $value->getJsonData ();
			}
		}
		return $var;
	}
	
	/**
	 */
	public function getArrayData($ultraPrune = false) {
		if ($ultraPrune)
			return $this->ultraPrune ();
		$this->prune ();
		$ret = Array ();
		$var = get_object_vars ( $this );
		unset ( $var ["__initializer__"] );
		unset ( $var ["__cloner__"] );
		unset ( $var ["__isInitialized__"] );
		unset ( $var ["password"] );
		unset ( $var ["deleted"] );
		foreach ( $var as $key => $val ) {
			// if (is_object ( $val ) && method_exists ( $val, 'getArrayData' )) {
			// $val = $val->getArrayData ();
			// }
			$ret [$key] = object2array ( $val );
		}
		return $ret;
	}
	
	// ////////////////////////////////////////////////////////////////////////
	// OBJECTS GETTERS / SETTERS
	
	/**
	 *
	 * @return Project
	 */
	public function getProjectsOwner() {
		return $this->projectsOwner;
	}
	
	/**
	 *
	 * @param Project $projectsOwner        	
	 */
	public function setProjectsOwner($projectsOwner) {
		$this->projectsOwner = $projectsOwner;
	}
	
	/**
	 *
	 * @return Project
	 */
	public function getProjectsInCharge() {
		return $this->projectsInCharge;
	}
	
	/**
	 *
	 * @param Project $projectsInCharge        	
	 */
	public function setProjectsInCharge($projectsInCharge) {
		$this->projectsInCharge = $projectsInCharge;
	}
	
	/**
	 *
	 * @return Project
	 */
	public function getProjectsInvolded() {
		return $this->projectsInvolded;
	}
	
	/**
	 *
	 * @param Project $projectsInvolded        	
	 */
	public function setProjectsInvolded($projectsInvolded) {
		$this->projectsInvolded = $projectsInvolded;
	}
	
	/**
	 *
	 * @return Message
	 */
	public function getMessagesSend() {
		return $this->messagesSend;
	}
	
	/**
	 *
	 * @param Message $messagesSend        	
	 */
	public function setMessagesSend($messagesSend) {
		$this->messagesSend = $messagesSend;
	}
	
	/**
	 *
	 * @return Message
	 */
	public function getMessagesReceived() {
		return $this->messagesReceived;
	}
	
	/**
	 *
	 * @param Message $messagesReceived        	
	 */
	public function setMessagesReceived($messagesReceived) {
		$this->messagesReceived = $messagesReceived;
	}
	// /**
	// */
	// public function toString() {
	// $this->prune ();
	// $ret = Array ();
	// $var = get_object_vars ( $this );
	// foreach ( $var as $key => $val ) {
	// // if (is_object ( $val ) && method_exists ( $val, 'getArrayData' )) {
	// // $val = $val->getArrayData ();
	// // }
	// $ret [$key] = object2array ( $val );
	// }
	// return $ret;
	// }
	public function getEmailLanguage() {
		switch ($this->emailLanguage) {
			case User::$EMAIL_LANGUAGE_FR :
				return "fr";
			default :
			case User::$EMAIL_LANGUAGE_EN :
				return "en";
		}
	}
	public function setEmailLanguage($emailLanguage) {
		$emailLanguageInt = intval ( $emailLanguage );
		switch (strtolower ( $emailLanguage )) {
			case "fr" :
				$emailLanguageInt = User::$EMAIL_LANGUAGE_FR;
				break;
			default :
			case "en" :
				$emailLanguageInt = User::$EMAIL_LANGUAGE_EN;
				break;
		}
		$this->emailLanguage = $emailLanguageInt;
	}
	
	//
	public function getUserEvents() {
		return $this->userEvents;
	}
	public function setUserEvents($userEvents) {
		$this->userEvents = $userEvents;
	}

	public function getMthPlatform() {
		return $this->mthPlatform;
	}
	public function setMthPlatform($mthPlatform) {
		$this->mthPlatform = $mthPlatform;
	}

}
